height <- 170
source("./findPressure.R")
pressarmleft <- findpressure(pressLA, arm_cSys, arm_cDia, 'Left Arm')
pressarmright <- findpressure(pressRA, arm_cSys, arm_cDia, 'Right Arm')
presslegleft <- findpressure(pressLL, leg_cSys, leg_cDia, 'Left Leg')
presslegright <- findpressure(pressRL, leg_cSys, leg_cDia, 'Right Leg')
lasys <- pressarmleft$systolic
ladia <- pressarmleft$diastolic
rasys <- pressarmright$systolic
radia <- pressarmright$diastolic
llsys <- presslegleft$systolic
lldia <- presslegleft$diastolic
rlsys <- presslegright$systolic
rldia <- presslegright$diastolic
# Find Abi
leftabi <- llsys/max(lasys, rasys)
rightabi <- rlsys/max(lasys, rasys)
# perhitungan baPWV
source("./findBaPWV.R")
leftbapwv <- findbapwv(pressLA, pressLL, height)
rightbapwv <- findbapwv(pressRA, pressRL, height)
df <- data.frame(
name = c('LA systolic','LA diastolic','RA systolic','RA diastolic','LL systolic','LL diastolic','RL systolic','RL diastolic','Left ABI','Right ABI','Left baPWV','Right baPWV'),
value = c(lasys,ladia,rasys,radia,llsys,lldia,rlsys,rldia,leftabi,rightabi,leftbapwv,rightbapwv)
)
df
# Perhitungan Compliance
# source("./modules/fakeSpline.R")
# source("./modules/polyfun/unmkpp.R")
# source("./modules/polyfun/ppval.R")
source("./modules/resampleQ.R")
source("./modules/waveSelect.R")
comp_select <- waveselect(comp)
comp_select <- t(comp_select)
plot(comp_select, type='l', main =  'comp_select',  xlab="Time (mili second)")
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
C1
C2
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
lasys2 <- 135.2991
ladia2 <- 79.3774
height2<- 170
source("./compCalc.R")
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
C1 <- compresult$C1
C2 <- compresult$C2
C1
C2
compCalc(my_vector, lasys2, ladia2, height2)
testCompSelect <- read.csv("./data/comp_select")
mydata <- read.table("./data/comp_select", header = FALSE)
my_vector <- scan(text = mydata$V1, sep = ",")
plot(my_vector, type='l', main =  'comp_select',  xlab="Time (mili second)")
lasys2 <- 135.2991
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
C1 <- compresult$C1
C2 <- compresult$C2
C1
C2
source("./modules/differential.R")
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
C1 <- compresult$C1
C2 <- compresult$C2
C1
C2
compresult <- compCalc(comp_select, lasys, ladia, height)
source("./modules/differential.R")
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y, s, r) {
n <- length(y)
t <- (0:1:(n-1))/s
f <- smooth.spline(t, y, spar = r)
y2 <- predict(f, t)
d1 <- diff(y2)
d2 <- diff(d1)
return(list(y2 = y2, d1 = d1, d2 = d2))
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y, s, r) {
n <- length(y)
t <- (0:(n-1)) / s
f <- smooth.spline(t, y, spar = r)
y2 <- predict(f, t)$y
d1 <- diff(y2) / s
d2 <- diff(d1) / s
return(list(y2 = y2, d1 = d1, d2 = d2))
}
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
C1 <- compresult$C1
C2 <- compresult$C2
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (0:(n-1)) / s
f <- smooth.Pspline(t, y, norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
compresult <- compCalc(comp_select, lasys, ladia, height)
help("smooth.Pspline")
differential <- function(y, s, r) {
n <- length(y)
t <- (0:(n-1)) / s
f <- smooth.Pspline(t, y, lambda = r)
y2 <- predict(f, t)
d1 <- diff(y2) / s
d2 <- diff(d1) / s
return(list(y2 = y2, d1 = d1, d2 = d2))
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y, s, r) {
n <- length(y)
t <- (0:(n-1)) / s
f <- smooth.Pspline(t, y, df = r)
y2 <- predict(f, t)
d1 <- diff(y2) / s
d2 <- diff(d1) / s
return(list(y2 = y2, d1 = d1, d2 = d2))
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
# t <- (0:(n-1)) / s
t <- seq(0, 1, length.out = n)
f <- smooth.Pspline(t, y, norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:(n-1)) / s
f <- smooth.Pspline(t, y, norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (0:n-1) / s
f <- smooth.Pspline(t, y, norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (0:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("y = ", length(y), "\n"))
f <- smooth.Pspline(t, y, norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("y = ", length(y), "\n"))
f <- smooth.Pspline(t, y, norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("y = ", length(y), "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
# cat(paste0("nrow(y) = ", nrow(y), "\n"))
cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
compresult <- compCalc(comp_select, lasys, ladia, height)
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
differential_data <- differential(data1, s, r)
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
compresult <- compCalcOld(my_vector, lasys, ladia, height)
compresult <- compCalc(comp_select, lasys, ladia, height)
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(t(y)), "\n"))
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
comp_select <- waveselect(comp)
source("./modules/differential.R")
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
compresult <- compCalc(comp_select, lasys, ladia, height)
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
comp_select <- waveselect(comp)
# comp_select <- t(comp_select)
plot(comp_select, type='l', main =  'comp_select',  xlab="Time (mili second)")
# comp_select <- t(comp_select)
plot(comp_select, type='l', main =  'comp_select',  xlab="Time (mili second)")
plot(comp_select, type='l', main =  'comp_select',  xlab="Time (mili second)")
source("./modules/differential.R")
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(t(y)), "\n"))
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
if(nrow(y) == 1) y <- t(y)
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
comp_select <- waveselect(comp)
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
comp_select <- waveselect(comp)
plot(comp_select, type='l', main =  'comp_select',  xlab="Time (mili second)")
source("./modules/differential.R")
source("./compCalc.R")
differential <- function(y,s,r) {
require('pspline')
require('pracma')
n <- length(y)
# t <- (1:n-1)/s
t <- (1:n-1) / s
cat(paste0("t = ", length(t), "\n"))
cat(paste0("nrow(y) = ", nrow(y), "\n"))
# cat(paste0("y = ", y, "\n"))
f <- smooth.Pspline(t, y, w=rep(1, length(t)), norder = 2, method = 1, spar=(1-r)/r)
y2 <- predict(f, t)
d1 <- gradient(as.vector(y2))
d2 <- gradient(as.vector(d1))
listReturn <- list(y2 = y2, d1 = d1, d2 = d2)
return(listReturn)
}
source("./compCalc.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
compresult <- compCalc(my_vector, lasys2, ladia2, height2)
C1 <- compresult$C1
C2 <- compresult$C2
# Import data NIVA
source("./modules/readFile.R")
# koefisien / constant
arm_cSys <- 0.62
arm_cDia <- 0.65
leg_cSys <- 0.65
leg_cDia <- 0.65
height <- 170
source("./findPressure.R")
pressarmleft <- findpressure(pressLA, arm_cSys, arm_cDia, 'Left Arm')
pressarmright <- findpressure(pressRA, arm_cSys, arm_cDia, 'Right Arm')
presslegleft <- findpressure(pressLL, leg_cSys, leg_cDia, 'Left Leg')
presslegright <- findpressure(pressRL, leg_cSys, leg_cDia, 'Right Leg')
lasys <- pressarmleft$systolic
ladia <- pressarmleft$diastolic
rasys <- pressarmright$systolic
radia <- pressarmright$diastolic
llsys <- presslegleft$systolic
lldia <- presslegleft$diastolic
rlsys <- presslegright$systolic
rldia <- presslegright$diastolic
# Find Abi
leftabi <- llsys/max(lasys, rasys)
rightabi <- rlsys/max(lasys, rasys)
# perhitungan baPWV
source("./findBaPWV.R")
leftbapwv <- findbapwv(pressLA, pressLL, height)
rightbapwv <- findbapwv(pressRA, pressRL, height)
df <- data.frame(
name = c('LA systolic','LA diastolic','RA systolic','RA diastolic','LL systolic','LL diastolic','RL systolic','RL diastolic','Left ABI','Right ABI','Left baPWV','Right baPWV'),
value = c(lasys,ladia,rasys,radia,llsys,lldia,rlsys,rldia,leftabi,rightabi,leftbapwv,rightbapwv)
)
df
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
# dataMatlabc <- read.csv("./data/Hendra")
dataMatlabc <- read.csv("./Durokhim")
# Import data NIVA
source("./modules/readFile.R")
pressarmleft <- findpressure(pressLA, arm_cSys, arm_cDia, 'Left Arm')
pressarmright <- findpressure(pressRA, arm_cSys, arm_cDia, 'Right Arm')
presslegleft <- findpressure(pressLL, leg_cSys, leg_cDia, 'Left Leg')
presslegright <- findpressure(pressRL, leg_cSys, leg_cDia, 'Right Leg')
lasys <- pressarmleft$systolic
ladia <- pressarmleft$diastolic
rasys <- pressarmright$systolic
radia <- pressarmright$diastolic
llsys <- presslegleft$systolic
lldia <- presslegleft$diastolic
rlsys <- presslegright$systolic
rldia <- presslegright$diastolic
# Find Abi
leftabi <- llsys/max(lasys, rasys)
rightabi <- rlsys/max(lasys, rasys)
# perhitungan baPWV
source("./findBaPWV.R")
leftbapwv <- findbapwv(pressLA, pressLL, height)
rightbapwv <- findbapwv(pressRA, pressRL, height)
df <- data.frame(
name = c('LA systolic','LA diastolic','RA systolic','RA diastolic','LL systolic','LL diastolic','RL systolic','RL diastolic','Left ABI','Right ABI','Left baPWV','Right baPWV'),
value = c(lasys,ladia,rasys,radia,llsys,lldia,rlsys,rldia,leftabi,rightabi,leftbapwv,rightbapwv)
)
df
comp_select <- waveselect(comp)
compresult <- compCalc(comp_select, lasys, ladia, height)
C1 <- compresult$C1
C2 <- compresult$C2
source("./modules/differential.R")
compresult <- compCalc(comp_select, lasys, ladia, height)
